#########################################
###              ALIASES              ###
#########################################

if [ -x "$(command -v fasd)" ]; then
    # fasd shortcuts
    alias a='fasd -a'        # any
    alias s='fasd -si'       # show / search / select
    alias d='fasd -d'        # directory
    alias f='fasd -f'        # file
    alias sd='fasd -sid'     # interactive directory selection
    alias sf='fasd -sif'     # interactive file selection
    alias zz='fasd_cd -d'     # cd, same functionality as j in autojump
    alias z='fasd_cd -d -i' # cd with interactive selection
    alias v='f -e vim' # quick opening files with vim
    alias vv='f -e zathura' # quick opening files with zathura
fi

if [ -x "$(command -v br)" ]; then
    alias l="br"
fi

## Shortcuts
alias google-chrome="google-chrome -enable-features=UseOzonePlatform -ozone-platform=wayland"
alias n-rsync-bam="rsync -aP --include=\"*/\" --include=\"*.bam\" --exclude=\"*\""
alias n-ssh="ssh -x -C"
alias lst="ls -lt"
alias ls="ls --color=auto"
alias gs="git status"
alias sac="conda activate"
alias logoff="pkill -KILL -u $USER"
alias takeover="tmux detach -a"
alias vi="nvim"
alias vim="nvim"
alias vimdiff="nvim -d"
alias le="less"
alias fe="feh --conversion-timeout 1"
alias c="clear"
alias cdp="cd -P"
alias pack="tar -zcvf"
alias pingg="ping 8.8.8.8"
alias s="dirs -v" # zprezto directory module
alias f='fasd_cd -i' # zprezto fasd module
alias agenda="gcalcli agenda"
do-most_recent_container() { docker exec -it `docker ps -a --no-trunc -q | head -n 1` bash; }

alias newest_ls="ls -lh --sort date -r --color=always | head -25"
alias cpfile="rsync --progress"
alias recently_changed='find . -newerct "15 minute ago" -print'
recently_changed_x() { find . -newerct "$1 minute ago" -print; }

alias tailwatch="watch -n 1 'tail $(ls -lA -t | head -n 1)'"
alias brd="bash runDocker.sh"
alias dun="du -chs | sort -h"
alias dfn="df -Tha --total"
#alias webify="mogrify -resize 690\> *.png"
alias myip="curl http://ipecho.net/plain; echo"
function myco () {
    IP=$(curl 'http://ipecho.net/plain' 2>/dev/null) ;
    # echo $IP ;
    curl 'http://www.geoplugin.net/json.gp?ip=$IP' 2>/dev/null| jq -r '"\(.geoplugin_city), \(.geoplugin_countryCode)"' ;
    }
alias wgetNice="wget --cut-dirs=100 -nH -np -r -c"
alias mkdir="mkdir -pv"
alias psn="ps auxf"
alias free="free -mt"
alias psg="ps aux | grep -v grep | grep -i -e VSZ -e"
alias fhere="find . -name "
alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias apu="sudo apt update"
alias apg="sudo apt upgrade"
alias apa="sudo apt update && sudo apt upgrade"
alias api="sudo apt install"
alias reboot="sudo systemctl reboot"
alias poweroff="sudo systemctl poweroff"


#########################################
###              CODING               ###
#########################################

## python
function retab () { python ~/.dotfiles/scripts/reindent.py $1 ; }

# conda backup
alias backup-conda-all="bash ~/.dotfiles/scripts/conda_backup.sh"


#########################################
###              SYSTEM               ###
#########################################

datediff () { d1=$(date -d $1 +%s);d2=$(date -d 'now' +%s);echo "$(( (d2 - d1) / 86400 )) days";}
function wttr () {
    # change Paris to your default location
    curl -s -S -H "Accept-Language: en" wttr.in/"${1:-London}" | head -q -n -3 ; }
alias weather="curl -s -S http://wttr.in/London | head -q -n -3"
function daily-quote () {
  source ~/.dotfiles/common/quotes.dec
  n_quotes=${#quotearray[@]}+1
  rand=$(($RANDOM%$n_quotes))
  echo ${quotearray[$rand]} ; }
alias clock="date | cut -d ' ' -f 4"
alias daily-cal="ncal -A 1 -M -b -w"
alias upip="conda list | grep \"<pip>\" | awk '{print $1}' | xargs pip install -U"

if ! type "doremi" > /dev/null 2>&1; then
    alias doremi="apt-mark showhold && sudo apt update && sudo apt upgrade && echo \"\" && weather && echo \"Tage im Mai: $(datediff 05/01/2024)\tTage im September: $(datediff 06/23/2016)\" && daily-cal && daily-quote"
fi

alias daily-info="weather && daily-cal && daily-quote"
alias ugit="git pull origin master && git submodule update --recursive"
function ugit-iterate () { for i in */ ; do cd $i; pwd -P; ugit; echo ""; cd ..; done ; }
alias timestamp="date +%Y_%m_%d-%H_%M"
alias suspend="systemctl suspend"
alias m-timezone="timedatectl"
alias m-timezone-update="sudo dpkg-reconfigure tzdata"
alias m-rsync="rsync -azP"
m-filesize () { echo "df -h" | sftp $1 ;}

## Alerts, a set of flexible alerts to notify about the end of a computation in terminal and tmux
print-tmux-session-info () {
    (if type tmux >/dev/null 2>/dev/null; then
        if tmux info &> /dev/null; then
            if ! { [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; } then
                for s in $(tmux list-sessions -F '#{session_name}'); do
                    tmux list-panes -F '#{pane_tty} #{session_name}' -t "$s"
                done | grep "$(tty)" | awk '{print $2}' #&2>/dev/null
            else
                echo "elsewhere";
            fi;
        else
            echo "none";
        fi;
    fi) 2> /dev/null ;
}

print-process-info () {
        # date '+%Y-%m-%d %H:%M:%S %Z'
        echo "$(date '+%H:%M:%S %Z') - $(hostname) @$(print-tmux-session-info):\nProcess finished [exit status $(echo $?)]" ; }

#alias ding='sleep 1; curl -s --output /dev/null -X POST --data-urlencode "payload={\"channel\": \"#notifications\", \"username\": \"glauxbot\", \"text\": \"$(print-process-info)\", \"icon_emoji\": \":ghost:\"}" https://hooks.slack.com/services/${NOTIFICATION_HOOK} 2>/dev/null'
#alias dong="sleep 1; notify-send -u \"normal\" \"$(print-process-info)\""
alias ring='sleep 1; curl -s --output /dev/null -X POST --data-urlencode "payload={\"channel\": \"#notifications\", \"username\": \"glauxbot\", \"text\": \"$(print-process-info) RingRing! \", \"icon_emoji\": \":ghost:\"}" https://hooks.slack.com/services/${NOTIFICATION_HOOK} 2>/dev/null'
alias tam="aplay -q $HOME/.dotfiles/files/soft_beep.way"

###########################
###       SERVICES      ###
###########################

###        SLURM CLUSTER              ###
#########################################
alias squeue="squeue --format=\"%.18i %.9P %.27j %.8u %.2t %.10M %.6D %R\""
alias m-squeuec="squeue -u $(whoami) -o \"%.14i %.50j %.2t %.10M\""
alias m-squeuei="squeue -u $(whoami) -o \"%.14i %.5j %.2t %.10M %.9l %.5D %16R %5K %3C %o\""
alias m-squeuea="squeue -o \"%.14i %.5j %.2t %.10M %.9l %.5D %16R %5K %3C %Q %o\""
alias m-jobmonitor="SACCT_FORMAT=\"JobID%20,JobName,User,Partition,NodeList,Elapsed,State,ExitCode,MaxRSS,AllocTRES%32\" sacct"
squeue-watch () { watch -n 3 -d "squeue -u $(whoami) --format=\"%.14i %.5j %.2t %.10M %.9l %.5D %16R %5K %3C %Q %o\"" ; }
alias m-squeuew="squeue-watch"
alias clusterquota='lfs quota -h -g fmlab'

alias latest="ls -ltr | tail -n 1 | awk '{print $NF}'"
alias latest2="ls -ltr | tail -n 2 | head -n 1 | awk '{print $NF}'"

#########################################


## Latex, Markdown & PDF viewer
alias lat="latexmk"
alias late="latexmk -halt-on-error"
alias lac="latexmk -c"
alias lacc="latexmk -C"
alias vw="zathura"
alias ve="evince"
alias vd="zathura *.pdf"
alias arw="arara *.tex && evince *(.om[1])"
alias ara="arara *.tex"
function vm () { pandoc -s -f markdown -t man $1 | man -l - ;}
function vmd () { pandoc $1 | lynx -stdin ;}

## Latex stuff
alias latex-duplicate-labels="zsh -c \"perl -nE 'say $1 if /(\\label[^}]*})/' **/*.tex | sort | uniq -c | sort -n\""

## APM (atom package manager)
alias apm-export="apm list --installed --bare"
alias apm-import="apm install --packages-file"

## AWS
function aws-login () { $(aws ecr get-login-password | docker login --username AWS --password-stdin "$AWS_ACCOUNT" ) ; }
function ecr-login () { export SINGULARITY_DOCKER_USERNAME=AWS SINGULARITY_DOCKER_PASSWORD=$(aws ecr get-login-password) ; }

## Docker
alias d="docker"
alias dima="docker images"
alias dim="docker images -f dangling=false"
alias dps="docker ps"
alias deb="docker run --rm -it test:latest /bin/bash"
function dev () { docker build -t $1 . ; }
function do-bash () { docker exec -i -t $1 /bin/bash ; }
alias do-count="docker ps -q | wc -l"
function do-stopall () { docker container stop $(docker container ls -a -q) ; }
function do-cleanup () { docker rm $(docker ps -qa --no-trunc --filter "status=exited"); docker rmi $(docker images --filter "dangling=true" -q --no-trunc) ; }
function do-export () { docker save $1 > $1.tar; }

## Digital Ocean
function dig-create() { doctl compute droplet create glaux-web --image debian-9-x64 --region $1 --size 1gb --ssh-keys 8c:7e:36:3e:d0:f5:98:d7:46:86:b5:78:7d:2e:9a:1e &&
sleep 5 && doctl compute firewall add-droplets de489db5-1e04-40e6-891c-8bdfa47745c8 --droplet-ids $(doctl compute droplet list | tail -n 1 |  awk '{print $1}') && sleep 10 ; }
function dig-connect() { ss-local -c /etc/shadowsocks.json -s $(doctl compute droplet list | tail -n 1 |  awk '{print $3}') ; }
function dig-domain() { doctl compute domain records create $(doctl compute domain list | tail -n 1 | awk '{print $1}') --record-type A --record-name web --record-data $(doctl compute droplet list | tail -n 1 |  awk '{print $3}') --record-ttl 180 ; }
function dig-close () { doctl compute droplet delete $(doctl compute droplet list | tail -n 1 |  awk '{print $1}') && sleep 10 && doctl compute domain records delete $(doctl compute domain list | tail -n 1 | awk '{print $1}') $(doctl compute domain records list $(doctl compute domain list | tail -n 1 | awk '{print $1}') | grep "A" |  awk '{print $1}') && doctl compute droplet list ; }
alias dig-status="doctl compute droplet list"
dig-domain-status() { doctl compute domain records list $(doctl compute domain list | tail -n 1 | awk '{print $1}') ; }
function dig-access () { doctl compute ssh $(doctl compute droplet list | tail -n 1 |  awk '{print $1}') ; }
function dig-reboot() { doctl compute droplet-action reboot $(doctl compute droplet list | tail -n 1 | awk '{print $1}') ; }

## Git
alias g="git"
function gtrack () { git ls-files $1 --error-unmatch; echo $? ; }

## Jupyter
# alias jup="jupyter notebook"
alias jup="jupyter lab"

## Python
alias i2="ipython2 -i --colors=Linux"
alias i="ipython3 -i -c \"import numpy as np;import pandas as pd;from math import *;\" --colors=Linux"
# program to format python files
mformat-python () { PYTHONPATH=~/Software/yapf python ~/Software/yapf/yapf --style google $1 ; }

## SSH
alias ssa="ssh -o \"UserKnownHostsFile /dev/null\""
alias sst='function _sst(){ ssh -t $1 "tmux attach-session -t $1 || tmux new-session -s $1"; }; _sst'
alias desktop="ssh desktop -t tmux a -t desktop"
alias clust1="ssh clust1 -t tmux a -t clust1"
alias juno="ssh juno -t tmux a -t juno"

## TMUX
# connect to running tmux session on ssh host
alias t="tmux"
alias ta="tmux attach"
alias tma='tmux attach -d -t'
alias tmn='tmux new -s $(basename $(pwd))'
alias tml='tmux list-sessions'
alias tls='tmux ls'
alias tdelete="tmux kill-session -t"
tcreate () { bash ~/.dotfiles/scripts/tmux-dev.sh "$1" ; }
tmonitor () { bash ~/.dotfiles/scripts/tmux-mon.sh "$1" ; }


###########################
###        FILES        ###
###########################

function mfile-encrypt { openssl aes-256-cbc -a -salt -in $1 -out $2 ; }
function mfile-decrypt { openssl aes-256-cbc -d -a -in $1 -out $2 ; }

alias mpng-shrink="optipng"
alias mjpg-shrink="jpegoptim"

function de-archive () {
# remove leading character string (exact 10 characters) that could be used as unique identifier for cluster jobs
    files=( $@ )
    for i in "${files[@]}"; do
        new_name=${i#*.}
        uid=${i%%.*}
        if [ ${#uid} -eq 10 ]
        then
            if ! [[ -f $new_name ]]
            then
                mv $i $new_name;
            fi
        fi
    done
}

function wc-dir () {
    for dir in $( find . -type d -print ); do
        files=$( find $dir -maxdepth 1 -type f | wc -l );
        echo "$dir : $files";
    done
}

alias scrotclip="scrot -s ~/.temp.png && xclip -selection clipboard -t image/png -i ~/.temp.png && rm -f ~/.temp.png"
function screenshot_to_text () {
    bash ~/.dotfiles/scripts/screenshot_to_text.sh;
}

# compression on linux
alias targz="tar czvf"
alias tarbz="tar cjvf"
alias tarxy="tar cJvf"
function extract-helper {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ] ; then
        # NAME=${1%.*}
        # mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)    tar xvJf $1    ;;
          *.lzma)      unlzma $1      ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar x -ad $1 ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *.xz)        unxz $1        ;;
          *.exe)       cabextract $1  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
fi
}

untar () { tar –zxvf $1 ; }

function mlat () { for var in "$@"; do /bin/bash ~/.dotfiles/scripts/latexeqs.sh "$var"; done ; }

# convert svg to pdf or png with rsvg-convert (in librsvg package)
function msvg-topdf () { for var in "$@"; do rsvg-convert -f pdf -o ${var%.svg}.pdf $var; done ; }

# convert pdf to emf
function mpdf-toemf () { for var in "$@"; do pdf2svg $var ${var%.pdf}.svg ; inkscape ${var%.pdf}.svg -M ${var%.pdf}.emf ; done ; }

# convert pdf to emf
function mpdf-tosvg () { for var in "$@"; do pdf2svg $var ${var%.pdf}.svg ; done ; }

# convert pdf to png
function mpdf-topng () { for var in "$@"; do pdftoppm $var ${var%.pdf} -png -r 300 -singlefile ; done ; }
function mpdf-splitToPNG () { for var in "$@"; do pdftk $var burst output ${var%.pdf}_%04d.pdf ; rm -f doc_data.txt; files=(${var%.pdf}_*.pdf); for f in ${files}; do echo $f; pdftoppm $f ${f%.pdf} -png -r 300 -singlefile ; rm -f $f; done ; done ; }

# convert pdf to png, specify resolution
function mpdf-topng-res () { pdftoppm $1 ${1%.pdf} -png -r $2 -singlefile ; }

# convert pdf to eps
function mpdf-toeps () { for var in "$@"; do inkscape $var --export-eps=${var%.pdf}.eps; done ; }

# convert pdf to multipage tif
function mpdf-totif () { for var in "$@"; do \gs -q -dNOPAUSE -sDEVICE=tiff24nc -sOutputFile=${var%.pdf}.ucompress.tif $var -c quit; convert ${var%.pdf}.ucompress.tif -compress lzw -quality 80% ${var%.pdf}.tif; rm -f ${var%.pdf}.ucompress.tif; done ; }

# count words in pdf
function mpdf-wordcount () { for var in "$@"; do pdftotext $var - | wc -w ; done ; }

# crop images in pdf file
function mpdf-crop () { for var in "$@"; do pdfcrop $var; done ; }

# change pdf format to a4
function mpdf-a4 () { pdfjam --outfile ${1%.pdf}_out.pdf --paper a4paper $1 ; }

# convert pdf to png
function mpdf-convertToPNG(){
    for var in "$@"
    do
      convert -verbose -density 600 -trim "$var" -quality 100 -sharpen 0x1.0 ${var%.pdf}.png;
    done
}

# create single pdf
function mpdf-view () {
    fh=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
    pdftk "$@" cat output "/tmp/${fh}.pdf"
    zathura "/tmp/${fh}.pdf"
    unset fh;
}

function mpdf-join () {
    array123=( "${@}" );
    newfile123=${array123[-1]};
    array123=( "${array123[@]:0:$(( ${#array123[@]} - 1 ))}" );
    pdftk $array123 cat output $newfile123;
    unset newfile123;
    unset array123;
}

function mpdf-webify(){
    for var in "$@"; do convert -verbose -density 200 -trim $var -quality 100 ${var%.pdf}.png; done ; }

function mfigure (){
    pdftk A=$1 cat end output $2
    mpdf-crop $2;
    mv -f ${2%.pdf}-crop.pdf $2;
    mpdf-convertToPNG $2;
    rm -f $1;
}

# decrypt pdf
function mpdf-decrypt () {
    if [ ! -d $1 ]; then
        printf "File does not exist\n"
        exit -1
    fi
    mv $1 backup_$file
    qpdf --password=$2 --decrypt $1 decrypted_$1
    mv decrypted_$1 $file
}

# decrease size of pdf - Quality level in dPDFSETTINGS= are "/screen," "/ebook," "/printer" and "/prepress,"
mpdf-shrink () { mv $1 $1_original && /usr/bin/gs -dPDFSETTINGS=/ebook -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -sOutputFile=${1/_original} $1_original && if [ $(ls -l  $1 | cut -f 5 -d " ") -lt $(ls -l  $1_original | cut -f 5 -d " ") ]; then rm -f $1_original; else mv -f $1_original $1; fi ;}

# print content of file to pdf
mpdf-printFileToPdf () { cat "$1" | a2ps -=book -B -q --medium=A4dj --borders=no -o out12345678.ps && ps2pdf out12345678.ps printTerm.pdf && rm -f out12345678.ps ; }

# check file content
mcheck-zerowidth () { grep "$(printf %b '\u200b')" $1 ; }

#########################################
### Helper functions                  ###
#########################################

function pdhist () {
    source ~/.dotfiles/common/.per-directory-history.zsh ;
}

function pdstate () {
    if [ -z "$_per_directory_history_is_global" ]; then
        echo "GLOBAL";
        exit 0;
    fi
    if $(echo "$_per_directory_history_is_global"); then
        echo "GLOBAL";
        exit 0;
    else
        echo "LOCAL"
        exit 0;
    fi ;
}

function countdown () {
   date1=$((`date +%s` + $1));
   while [ "$date1" -ne `date +%s` ]; do
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 0.1
   done
   beep -f 600 -r 3 -d 500;
   sleep 1; echo -e "\a";
}

function stopwatch () {
  date1=`date +%s`;
   while true; do
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
    sleep 0.1
   done
   beep -f 600 -r 3 -d 500;
   sleep 1; echo -e "\a";
}

function summary () {
sort -g $1 | awk '
  BEGIN {
    c = 0;
    sum = 0;
  }
  $1 ~ /^[0-9]*(\.[0-9]*)?$/ {
    a[c++] = $1;
    sum += $1;
  }
  END {
    ave = sum / c;
    if( (c % 2) == 1 ) {
      median = a[ int(c/2) ];
    } else {
      median = ( a[c/2] + a[c/2-1] ) / 2;
    }
    OFS="\t";
    print "sum, count, average, median, min, max";
    print sum, c, ave, median, a[0], a[c-1];
  }
';}

# remove whitespace from file
removeWhitespace () { mv "$1" "${1// /_}"; }

# overwrite $1 with random stream
overwrite () { pv -tpreb /dev/urandom | sudo dd of=$1 bs=4096; }

# find duplicate files
dupsearch () { find -not -empty -type f -printf "%s\n" | sort -rn | uniq -d | xargs -I{} -n1 find -type f -size {}c -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate; }

function debchanglog () {
        zless "/usr/share/doc/$1/changelog.Debian.gz"
}


#########################################
### Internet and IP settings          ###
#########################################

# download pdfs from webpage
web-wgetPDF () { wget -A pdf -p -E -k -K -np $1 ; }

# investigate IPs
alias web-wanip='dig +short myip.opendns.com @resolver1.opendns.com'
alias web-ip="curl ifconfig.me/ip"
web-quHOST () { host $1 | rev | cut -d " " -f1 | rev; }
web-quCountrybyIP () { curl ipinfo.io/$1 2&>/dev/null | grep -Po '"country":.*?[^\\]",' | perl -pe 's/"country"://; s/^"//; s/",$//; s/"//; s/^\s+//' ; }

alias m-drivemount="google-drive-ocamlfuse ~/Drive"


###########################
###        SYSTEM       ###
###########################

alias firefox="Exec=env MOZ_X11_EGL=1 /usr/bin/firefox"
alias pfirefox="/usr/bin/firefox -private-window"
alias pchrome="/usr/bin/chromium -incognito"
alias tchrome="/usr/bin/chromium --user-data-dir=`mktemp -d`"
function hl () { grep -A1 "Host $1" $HOME/.ssh/config | awk '/HostName/{getline; print}' | awk '{print $2}';}

## Remote file system
alias mount-library="sshfs -o allow_other -o ro storagebox:/library ~/mount"

# fix caps issue
capsfix () { /usr/bin/python3 -c "from ctypes import *; X11 = cdll.LoadLibrary(\"libX11.so.6\"); display = X11.XOpenDisplay(None); X11.XkbLockModifiers(display, c_uint(0x0100), c_uint(2), c_uint(0)); X11.XCloseDisplay(display)" ; }
CAPSFIX () { /usr/bin/python3 -c "from ctypes import *; X11 = cdll.LoadLibrary(\"libX11.so.6\"); display = X11.XOpenDisplay(None); X11.XkbLockModifiers(display, c_uint(0x0100), c_uint(2), c_uint(0)); X11.XCloseDisplay(display)" ; }

m-mode-present () { xrandr --output DP1 --auto ; xrandr --output DP2 --auto ; }
m-mode-savepower() { if [ ! -f /tmp/savedata.lock ]; then systemctl stop bluetooth.service && brightnessctl set 10% && touch /tmp/savedata.lock; else systemctl start bluetooth.service && brightnessctl set 30% && sleep 3 && rm -f /tmp/savedata.lock; fi; }
m-mode-flightmode() { if [ ! -f /tmp/flightmode.lock ]; then nmcli radio wifi off && touch /tmp/flightmode.lock; echo "Turning flight mode on"; else nmcli radio wifi on && rm -f /tmp/flightmode.lock; echo "Turning flight mode off"; fi; }
m-mode-quiet() { if [ ! -f /tmp/quiet.lock ]; then killall -SIGUSR1 dunst; touch /tmp/quiet.lock; echo "Turning quiet mode on"; else killall -SIGUSR2 dunst; rm -f /tmp/quiet.lock; echo "Turning quiet mode off"; fi; }
### Monitor and presentation settings ###

# set dual/single monitors
dual-dp () {  xrandr --output eDP1 --primary --output DP1 --auto --right-of eDP1;}
dual-vga (){ xrandr --output eDP1 --primary --output DP2 --auto --right-of eDP1;}
dual-hdmi () {  xrandr --output eDP1 --primary --output HDMI1 --auto --right-of eDP1;}
single () { xrandr --output DP1 --off; xrandr --output DP2 --off ; xrandr --output HDMI1 --off ; xrandr --output HDMI2 --off ;}
present () { xrandr --output DP1 --auto ; xrandr --output DP2 --auto;}

# set background light
darken () { brightnessctl set 0% ; }
lighten () { brightnessctl set 100% ;}

# battery status
function m-battery () { upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage" ; }

### Internet and proxy commands ###
alias wgup="sudo wg-quick up "
alias wgdown="sudo wg-quick down "
alias wgstatus="sudo wg"
alias caup="sudo ipsec up CAM && touch /tmp/vpn.lock"
alias cadown="sudo ipsec down CAM && rm -f /tmp/vpn.lock"
alias browsh="docker run --rm -it browsh/browsh"
alias nmshow="nmcli device wifi list"
alias nmlist="nmcli con show --active"
alias nmup="nmcli connection up"
alias nmdown="nmcli connection down"

###########################
###       SERVICES      ###
###########################

alias zotero="/opt/Zotero_linux-x86_64/zotero"
alias matlab-desktop="/home/michael/.matlab/bin/matlab &"
alias m-generate-password="openssl rand -base64"

# route through glaux-web
alias proxyssh="ssh glaux-proxy -D 8080 -N -C -o \"UserKnownHostsFile /dev/null\""
alias ssho="ssh -o \"UserKnownHostsFile /dev/null\""
# -D: Tells SSH that we want a SOCKS tunnel on the specified port number (you can choose a number between 1025-65536)
# -f: Forks the process to the background
# -C: Compresses the data before sending it
# -q: Uses quiet mode
# -N: Tells SSH that no command will be sent once the tunnel is up
proxyshadow () { ss-local -l 8080 -c /etc/shadowsocks.json -s streisand.proxy.$(hostname | sed -e "s/[-][[:alnum:]]\+$//")lab.org ; }
proxyvpn () { sudo openvpn --remote streisand.proxy.$(hostname | sed -e "s/[-][[:alnum:]]\+$//" | awk '{print $1}')lab.org 443 --config ~/.ssh/client1.ovpn ; }

# route through work
alias proxywork="ssh desktop -D 8079 -N -C"
alias proxyrstudio="ssh -Y -N -L localhost:8787:localhost:8787 -L localhost:8001:localhost:8001 desktop"
alias proxyjupyter="ssh -Y -N -L localhost:8785:localhost:8888 desktop"
alias proxyrdocker="ssh -N -L localhost:8786:localhost:8786 desktop"

# copy only bam files
alias m-rsync-bam="rsync -zarvP --prune-empty-dirs --include='*/\' --include='*.bam' --exclude='*'"

alias m-connect-ext="nmcli device wifi connect 00:5F:67:13:6C:3B"
alias m-connect-fre="nmcli device wifi connect A4:05:D6:08:38:00"
alias m-connect-new="nmcli device wifi connect"
alias m-connect-list="nmcli dev wifi list"
alias m-connect-scan="nmcli dev wifi rescan"

################################
###  BACKUP & System updates ###
################################

# Backup routine
# alias fasollati="bash $HOME/.backup/local-backup.sh && echo \"df -h\" | sftp storagebox:"
# if ! type "jour" > /dev/null 2>&1; then
    # alias jour="sleep 3 && doremi"
# fi
alias check-storage="echo \"df -h\" | sftp storagebox"

## Backup management
backup-manager () { bash $HOME/.backup/duplicity.sh; }
backup-list () { ls $HOME/.backup/ | sort -r | grep backup.tar.gz | head -1; }
backup-zotero () { bash $HOME/.backup/zotero-backup.sh; }
backup-email () { gmvault sync -d $HOME/.mail --emails-only $1; }

alias backup-package-list="dpkg --get-selections"

function backup-conda-envs {
	NOW=$(date "+%Y-%m-%d")
    mkdir "$HOME/conda-$NOW"
	ENVS=$(conda env list | grep '^\w' | cut -d' ' -f1)
    while read -r env; do
		source activate $env
		conda env export > $HOME/conda-$NOW/$env.yml
		echo "Exporting $env"
        source deactivate
    done <<< "$ENVS"
    zip -r "$HOME/conda-$NOW.zip" "$HOME/conda-$NOW"
    rm -rf "$HOME/conda-$NOW"
}


function backup-restore-signed {
    echo -e "Restore from $1 to $2"
    sleep 5
    _SIGN_KEY=4FF90AD4
    if [ ! -d $1 ]; then
        printf "Backup does not exist\n"
        return -1
    fi
    if [ -d $2 ]; then
        printf "Do not restore to an existing location\n"
        return -1
    fi
    duplicity --sign-key "$_SIGN_KEY" "file://$1" "file://$2"
}

function backup-restore-unsigned {
    echo -e "Restore from $1 to $2"
    sleep 5
    if [ ! -d $1 ]; then
        echo "Backup does not exist\n"
        return -1
    fi
    if [ -d $2 ]; then
        echo "Do not restore to an existing location\n"
        return -1
    fi
    duplicity --gpg-options "--skip-verify" "file://$1" $2
}

## backup operations
# NOTE run inside .encrypted folder
backup-secure_compress () { zip -9 -r "EncryptedBackupDocuments_$(date +%Y-%m-%d).zip" $@ ; }
# NOTE compress files before encrypting
backup-secure_encrypt () { echo "Encrypting $1" && \
    gpg --symmetric \
    --cipher-algo aes256 \
    --digest-algo sha512 \
    --cert-digest-algo sha512 \
    --s2k-mode 3 \
    --s2k-digest-algo sha512 \
    --s2k-cipher-algo aes256 \
    --s2k-count 65011712 \
    --compress-algo zip -z 8 \
    --no-greeting \
    -o "${1}.enc.gpg" $1 && \
    echo "Encrypting ${1} as ${1}.enc.gpg\n$(date +\"%Y-%m-%d_%H-%M-%S\")\nSHA512:\n$(sha512sum $1.enc.gpg)" | tee -a "$1.enc.gpg.info" ; }
backup-secure_checkhash () { sha512sum $1; cat "${1}.info" ; }
backup-secure_droppw () { gpgconf --reload gpg-agent ; }
backup-secure_decrypt () { echo "Decrypting $1" && gpg -d $1 > "${1%.enc.gpg}" ; }
